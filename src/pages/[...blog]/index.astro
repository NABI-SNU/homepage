---
import type { InferGetStaticPropsType, GetStaticPaths } from 'astro';

import merge from 'lodash.merge';
import type { ImageMetadata } from 'astro';
import Layout from '~/layouts/PageLayout.astro';
import SinglePost from '~/components/blog/SinglePost.astro';
import ToBlogLink from '~/components/blog/ToBlogLink.astro';

import { getCanonical, getPermalink } from '~/utils/permalinks';
import { getStaticPathsBlogPost, blogPostRobots } from '~/utils/blog';
import { findImage } from '~/utils/images';
import type { MetaData } from '~/types';
import RelatedPosts from '~/components/blog/RelatedPosts.astro';

export const prerender = true;

export const getStaticPaths = (async () => {
  return await getStaticPathsBlogPost();
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { post } = Astro.props as Props;

const url = getCanonical(getPermalink(post.permalink, 'post'));
const image = (await findImage(post.image)) as ImageMetadata | string | undefined;

const metadata = merge(
  {
    title: post.title,
    description: post.excerpt,
    robots: {
      index: blogPostRobots?.index,
      follow: blogPostRobots?.follow,
    },
    openGraph: {
      type: 'article',
      ...(image
        ? { images: [{ url: image, width: (image as ImageMetadata)?.width, height: (image as ImageMetadata)?.height }] }
        : {}),
    },
  },
  { ...(post?.metadata ? { ...post.metadata, canonical: post.metadata?.canonical || url } : {}) }
) as MetaData;
---

<Layout metadata={metadata}>
  <pagefind-main>
    <SinglePost post={{ ...post, image: image }} url={url}>
      {post.Content ? <post.Content /> : <Fragment set:html={post.content || ''} />}
    </SinglePost>
  </pagefind-main>
  <section id="blog-footer">
    <ToBlogLink />
    <div class = "max-w-6xl mx-auto">
      <RelatedPosts post={post} />
    </div>
  </section>
</Layout>

<script>
  if (typeof window !== 'undefined') {
    const toc     = document.getElementById('toc');
    const footer  = document.getElementById('blog-footer');
    if (toc && footer) {
    const observer = new IntersectionObserver(
      ([entry]) => toc.classList.toggle('translate-x-full', entry.isIntersecting),
      { rootMargin: '0px', threshold: 0.5 }
      );
      observer.observe(footer);
    }
  }
</script>

