---
import PageFindSearch from "astro-pagefind/components/Search";
import { Icon } from "astro-icon/components";
---

<button
  type="button"
  id="search-trigger"
  aria-label="Open search"
  aria-controls="search-dialog"
  aria-expanded="false"
  class="
    ml-2                         /* even gap from RSS / theme-toggle */
    inline-flex items-center justify-center
    rounded-md p-2               /* symmetric padding */
    text-neutral-700 dark:text-neutral-300
    transition-colors            /* smooth hover/focus */
    focus:outline-none focus:ring-2 focus:ring-primary-500
    hover:bg-neutral-200         /* light-mode hover */
    dark:hover:bg-neutral-800       /* dark-mode hover (background only) */
  "
>
  <Icon name="tabler:search" class="h-5 w-5" />
</button>

<!-- Search dialog -->
<dialog
  id="search-dialog"
  class="animate-scale-down fixed left-1/2 top-[10vh] !m-0 w-full max-w-2xl -translate-x-1/2 rounded-lg p-0 backdrop:bg-gray-950/50"
>
  <div class="relative max-h-[80vh] overflow-y-auto bg-white dark:bg-[#040620] rounded-lg">
    <!-- Close button -->
    <div class="sticky right-0 top-0 z-10 bg-white dark:bg-[#040620] px-6 py-4">
      <button
        type="button"
        id="close-search"
        aria-label="Close search"
        class="absolute right-4 top-4 rounded-full p-2 hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300 transition-colors"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
    </div>

    <!-- Search component -->
    <div class="min-h-[400px] p-6 bg-white dark:bg-[#040620]">
      <PageFindSearch
        id="search"
        className="pagefind-ui"
        uiOptions={{ showImages: false }}
      />
    </div>
  </div>
</dialog>

<style>
  dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
  }

  /* Remove default dialog styles */
  dialog {
    border: none;
    padding: 0;
  }

  /* Custom scrollbar styles - Light mode */
  dialog div {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e0 #edf2f7;
  }

  dialog div::-webkit-scrollbar {
    width: 8px;
  }

  dialog div::-webkit-scrollbar-track {
    background: #edf2f7;
  }

  dialog div::-webkit-scrollbar-thumb {
    background-color: #cbd5e0;
    border-radius: 4px;
  }

  /* Dark mode scrollbar styles */
  .dark dialog div {
    scrollbar-color: #4a5568 #2d3748;
  }

  .dark dialog div::-webkit-scrollbar-track {
    background: #2d3748;
  }

  .dark dialog div::-webkit-scrollbar-thumb {
    background-color: #4a5568;
  }

  /* Light mode pagefind styles */
  :root {
    --pagefind-ui-primary: #3b82f6;
    --pagefind-ui-text: #374151;
    --pagefind-ui-background: #ffffff;
    --pagefind-ui-border: #d1d5db;
    --pagefind-ui-tag: #f3f4f6;
    --pagefind-ui-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  /* Dark mode pagefind styles - applied via class */
  .dark {
    --pagefind-ui-primary: #63b3ed;
    --pagefind-ui-text: #e2e8f0;
    --pagefind-ui-background: #040620;
    --pagefind-ui-border: #4a5568;
    --pagefind-ui-tag: #2d3748;
    --pagefind-ui-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  @keyframes scale-down {
    from {
      opacity: 0;
      transform: translate(-50%, -30%) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translate(-50%, 0) scale(1);
    }
  }

  .animate-scale-down {
    animation: scale-down 0.2s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  /* Optional: Add animation for closing */
  dialog[closing] {
    animation: scale-up 0.2s cubic-bezier(0.16, 1, 0.3, 1) forwards;
  }

  @keyframes scale-up {
    from {
      opacity: 1;
      transform: translate(-50%, 0) scale(1);
    }
    to {
      opacity: 0;
      transform: translate(-50%, -30%) scale(0.95);
    }
  }
</style>

<script>
  function initSearch() {
    // Get DOM elements with proper typing
    const searchTrigger = document.getElementById(
      "search-trigger"
    ) as HTMLButtonElement | null;
    const searchDialog = document.getElementById(
      "search-dialog"
    ) as HTMLDialogElement | null;
    const closeButton = document.getElementById(
      "close-search"
    ) as HTMLButtonElement | null;

    // Function to detect current theme
    function getCurrentTheme(): 'light' | 'dark' {
      // Method 1: Check if document has dark class (most common)
      if (document.documentElement.classList.contains('dark')) {
        return 'dark';
      }

      // Method 2: Check data-theme attribute
      const dataTheme = document.documentElement.getAttribute('data-theme');
      if (dataTheme === 'dark') {
        return 'dark';
      }

      // Method 3: Check body class
      if (document.body.classList.contains('dark')) {
        return 'dark';
      }

      // Method 4: Check CSS custom property
      const themeFromCSS = getComputedStyle(document.documentElement)
        .getPropertyValue('--theme')
        .trim();
      if (themeFromCSS === 'dark') {
        return 'dark';
      }

      // Default to light theme
      return 'light';
    }

    // Function to update pagefind theme
    function updatePagefindTheme() {
      const theme = getCurrentTheme();
      const dialog = searchDialog;
      
      if (dialog) {
        // Apply theme class to dialog for CSS variables
        if (theme === 'dark') {
          dialog.classList.add('dark');
        } else {
          dialog.classList.remove('dark');
        }
      }
    }

    // Open dialog
    searchTrigger?.addEventListener("click", () => {
      updatePagefindTheme(); // Update theme before showing
      searchDialog?.showModal();
      searchTrigger.setAttribute("aria-expanded", "true");
      // Focus the search input when dialog opens
      const searchInput = document.querySelector<HTMLInputElement>(
        ".pagefind-ui__search-input"
      );
      searchInput?.focus();
    });

    // Close dialog
    closeButton?.addEventListener("click", () => {
      searchDialog?.close();
      searchTrigger?.setAttribute("aria-expanded", "false");
    });

    // Close dialog when clicking outside
    searchDialog?.addEventListener("click", (e: MouseEvent) => {
      if (!searchDialog) return;

      const dialogDimensions = searchDialog.getBoundingClientRect();
      if (
        e.clientX < dialogDimensions.left ||
        e.clientX > dialogDimensions.right ||
        e.clientY < dialogDimensions.top ||
        e.clientY > dialogDimensions.bottom
      ) {
        searchDialog.close();
        searchTrigger?.setAttribute("aria-expanded", "false");
      }
    });

    // Handle escape key
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Escape" && searchDialog?.open) {
        searchDialog.close();
        searchTrigger?.setAttribute("aria-expanded", "false");
      }
    });

    // Watch for theme changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && 
            (mutation.attributeName === 'class' || 
             mutation.attributeName === 'data-theme')) {
          updatePagefindTheme();
        }
      });
    });

    // Observe theme changes on document element and body
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class', 'data-theme']
    });

    observer.observe(document.body, {
      attributes: true,
      attributeFilter: ['class']
    });

    // Initial theme setup
    updatePagefindTheme();
  }

  initSearch();
  document.addEventListener("astro:after-swap", initSearch);
</script>