---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAssetsOptimizer,
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '~/utils/images-optimization';

import { Image as AstroImage } from 'astro:assets';

const props = Astro.props as ImageProps;

// validation/fall-backs
if (props.alt == null) throw new Error('`alt` is required for accessibility');
props.loading ??= 'lazy';
props.decoding ??= 'async';
if (typeof props.width === 'string') props.width = parseInt(props.width);
if (typeof props.height === 'string') props.height = parseInt(props.height);

// Resolve & optimize
const _image = await findImage(props.src);
let imageInfo;
if (typeof _image === 'string' && isUnpicCompatible(_image)) {
  imageInfo = await getImagesOptimized(_image, props, unpicOptimizer);
} else if (_image) {
  imageInfo = await getImagesOptimized(_image, props, astroAssetsOptimizer);
}
---

{
  imageInfo ? (
    <AstroImage
      src={_image}
      {...imageInfo.attributes}
      {
        ...props /* forward widths/sizes/layout if you passed them */
      }
    />
  ) : (
    <img
      src={typeof props.src === 'string' ? props.src : ''}
      alt={props.alt}
      width={props.width}
      height={props.height}
      loading={props.loading}
      decoding={props.decoding}
      {...(props as HTMLAttributes<'img'>)}
    />
  )
}
