---
import Layout from '~/layouts/PageLayout.astro';
import SocialShare from '~/components/common/SocialShare.astro';
import type { MetaData } from '~/types';

export interface Props {
  frontmatter: {
    title?: string;
  };
  url: string | URL;
}

const { frontmatter, url } = Astro.props;
const metadata: MetaData = {
  title: frontmatter?.title,
};
---

<Layout metadata={metadata}>
  <section class="px-4 py-16 sm:px-6 mx-auto lg:px-8 lg:py-20 max-w-4xl">
    <h1 class="font-bold font-heading text-4xl md:text-5xl leading-tighter tracking-tighter">{frontmatter.title}</h1>
    <div
      class="mx-auto prose prose-lg max-w-4xl dark:prose-invert dark:prose-headings:text-slate-300 prose-md prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold prose-a:text-blue-600 dark:prose-a:text-blue-400 prose-img:rounded-md prose-img:shadow-lg mt-8"
    >
      <slot />
    </div>
  </section>
  
  <div class="mx-auto px-6 sm:px-6 max-w-3xl mt-8 flex justify-between flex-col sm:flex-row">
    <SocialShare url={url} text={frontmatter.title || ''} class="mt-5 sm:mt-1 align-middle text-gray-500 dark:text-slate-600" />
  </div>
  
  <section class="px-4 py-16 sm:px-6 mx-auto lg:px-8 lg:py-20 max-w-4xl">
    <div class = "giscus"></div>
  </section>
</Layout>

<script>
  // Function to detect current theme
  function getCurrentTheme(): 'light' | 'dark' {
    // Method 1: Check if document has dark class (most common)
    if (document.documentElement.classList.contains('dark')) {
      return 'dark';
    }
    // Method 2: Check data-theme attribute
    const dataTheme = document.documentElement.getAttribute('data-theme');
    if (dataTheme === 'dark') {
      return 'dark';
    }
    // Method 3: Check body class
    if (document.body.classList.contains('dark')) {
      return 'dark';
    }
    // Method 4: Check CSS custom property
    const themeFromCSS = getComputedStyle(document.documentElement)
      .getPropertyValue('--theme')
      .trim();
    if (themeFromCSS === 'dark') {
      return 'dark';
    }
    // Default to light theme
    return 'light';
  }

  // Function to load Giscus with current theme
  function loadGiscus() {
    const container = document.getElementById('giscus-container');
    if (!container) return;

    const currentTheme = getCurrentTheme();
    const giscusTheme = currentTheme === 'dark' ? 'catppucin-frappe' : 'catppucin-latte'
    
    // Clear existing Giscus instance
    container.innerHTML = '';

    // Create script element
    const script = document.createElement('script');
    script.src = 'https://giscus.app/client.js';
    script.setAttribute('data-repo', 'NABI-SNU/homepage');
    script.setAttribute('data-repo-id', 'R_kgDOOkMCBQ');
    script.setAttribute('data-category', 'General');
    script.setAttribute('data-category-id', 'DIC_kwDOOkMCBc4CskkE');
    script.setAttribute('data-mapping', 'pathname');
    script.setAttribute('data-strict', '1');
    script.setAttribute('data-reactions-enabled', '1');
    script.setAttribute('data-emit-metadata', '0');
    script.setAttribute('data-input-position', 'bottom');
    script.setAttribute('data-theme', giscusTheme);
    script.setAttribute('data-lang', 'en');
    script.setAttribute('crossorigin', 'anonymous');
    script.async = true;

    container.appendChild(script);
  }

  // Function to update Giscus theme
  function updateGiscusTheme() {
    const currentTheme = getCurrentTheme();
    const giscusFrame = document.querySelector('iframe.giscus-frame') as HTMLIFrameElement;
    
    if (giscusFrame) {
      giscusFrame.contentWindow?.postMessage(
        {
          giscus: {
            setConfig: {
              theme: currentTheme
            }
          }
        },
        'https://giscus.app'
      );
    }
  }

  // Load Giscus when DOM is ready
  document.addEventListener('DOMContentLoaded', loadGiscus);

  // Watch for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && 
          (mutation.attributeName === 'class' || mutation.attributeName === 'data-theme')) {
        updateGiscusTheme();
      }
    });
  });

  // Observe changes to html element (most common location for theme classes)
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class', 'data-theme']
  });

  // Also observe body element in case theme is applied there
  observer.observe(document.body, {
    attributes: true,
    attributeFilter: ['class', 'data-theme']
  });

  // Handle system theme changes
  if (window.matchMedia) {
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      // Small delay to allow theme switching logic to complete
      setTimeout(updateGiscusTheme, 100);
    });
  }
</script>